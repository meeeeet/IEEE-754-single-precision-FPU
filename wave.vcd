$date
	Wed Sep 06 19:14:16 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module top $end
$var wire 32 ! out [31:0] $end
$var reg 32 " a [31:0] $end
$var reg 32 # b [31:0] $end
$var reg 1 $ clk $end
$var reg 2 % opcode [1:0] $end
$scope module dut $end
$var wire 32 & A [31:0] $end
$var wire 32 ' B [31:0] $end
$var wire 1 $ clk $end
$var wire 2 ( opcode [1:0] $end
$var wire 32 ) sub_result [31:0] $end
$var wire 32 * mul_result [31:0] $end
$var wire 32 + add_result [31:0] $end
$var reg 32 , OUT [31:0] $end
$var reg 32 - div_result [31:0] $end
$scope module a1 $end
$var wire 32 . a [31:0] $end
$var wire 32 / b [31:0] $end
$var wire 32 0 sum [31:0] $end
$var wire 1 1 b_sign $end
$var wire 24 2 b_mantissa [23:0] $end
$var wire 8 3 b_exponent [7:0] $end
$var wire 1 4 a_sign $end
$var wire 24 5 a_mantissa [23:0] $end
$var wire 8 6 a_exponent [7:0] $end
$var reg 24 7 aligned_a [23:0] $end
$var reg 24 8 aligned_b [23:0] $end
$var reg 8 9 aligned_expo [7:0] $end
$var reg 8 : n_exp [7:0] $end
$var reg 1 ; n_sign $end
$var reg 25 < n_sum [24:0] $end
$scope module normalization $end
$var wire 8 = exponent [7:0] $end
$var wire 25 > mantissa [24:0] $end
$var wire 1 ; sign $end
$var wire 32 ? out [31:0] $end
$var reg 8 @ o_e [7:0] $end
$var reg 25 A o_m [24:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 B i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module a2 $end
$var wire 32 C a [31:0] $end
$var wire 32 D b [31:0] $end
$var wire 32 E sum [31:0] $end
$var wire 1 F b_sign $end
$var wire 24 G b_mantissa [23:0] $end
$var wire 8 H b_exponent [7:0] $end
$var wire 1 I a_sign $end
$var wire 24 J a_mantissa [23:0] $end
$var wire 8 K a_exponent [7:0] $end
$var reg 24 L aligned_a [23:0] $end
$var reg 24 M aligned_b [23:0] $end
$var reg 8 N aligned_expo [7:0] $end
$var reg 8 O n_exp [7:0] $end
$var reg 1 P n_sign $end
$var reg 25 Q n_sum [24:0] $end
$scope module normalization $end
$var wire 8 R exponent [7:0] $end
$var wire 25 S mantissa [24:0] $end
$var wire 1 P sign $end
$var wire 32 T out [31:0] $end
$var reg 8 U o_e [7:0] $end
$var reg 25 V o_m [24:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 W i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module m1 $end
$var wire 32 X a [31:0] $end
$var wire 32 Y b [31:0] $end
$var wire 32 Z res [31:0] $end
$var wire 1 [ b_sign $end
$var wire 24 \ b_mantissa [23:0] $end
$var wire 8 ] b_exponent [7:0] $end
$var wire 1 ^ a_sign $end
$var wire 24 _ a_mantissa [23:0] $end
$var wire 8 ` a_exponent [7:0] $end
$var reg 8 a n_exp [7:0] $end
$var reg 48 b n_mul [47:0] $end
$var reg 1 c n_sign $end
$scope module m1 $end
$var wire 8 d exponent [7:0] $end
$var wire 48 e mantissa [47:0] $end
$var wire 1 c sign $end
$var wire 32 f out [31:0] $end
$var reg 8 g o_e [7:0] $end
$var reg 48 h o_m [47:0] $end
$scope begin $ivl_for_loop1 $end
$var integer 32 i i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 i
b101000000000000000000000000000000000000000000000 h
b10000001 g
b1000001001000000000000000000000 f
b10100000000000000000000000000000000000000000000 e
b10000010 d
0c
b10100000000000000000000000000000000000000000000 b
b10000010 a
b1111111 `
b100000000000000000000000 _
0^
b10000010 ]
b101000000000000000000000 \
0[
b1000001001000000000000000000000 Z
b1000001001000000000000000000000 Y
b111111100000000000000000000000 X
b1 W
b1001000000000000000000000 V
b10000001 U
b11000001000100000000000000000000 T
b100100000000000000000000 S
b10000010 R
b100100000000000000000000 Q
1P
b10000010 O
b11 N
b101000000000000000000000 M
b100000000000000000000 L
b1111111 K
b100000000000000000000000 J
0I
b10000010 H
b101000000000000000000000 G
1F
b11000001000100000000000000000000 E
b11000001001000000000000000000000 D
b111111100000000000000000000000 C
b1 B
b1011000000000000000000000 A
b10000001 @
b1000001001100000000000000000000 ?
b101100000000000000000000 >
b10000010 =
b101100000000000000000000 <
0;
b10000010 :
b11 9
b101000000000000000000000 8
b100000000000000000000 7
b1111111 6
b100000000000000000000000 5
04
b10000010 3
b101000000000000000000000 2
01
b1000001001100000000000000000000 0
b1000001001000000000000000000000 /
b111111100000000000000000000000 .
bx -
bx ,
b1000001001100000000000000000000 +
b1000001001000000000000000000000 *
b11000001000100000000000000000000 )
bx (
b1000001001000000000000000000000 '
b111111100000000000000000000000 &
bx %
0$
b1000001001000000000000000000000 #
b111111100000000000000000000000 "
bx !
$end
#1
b0 !
b0 ,
1$
#2
b0 %
b0 (
0$
#3
b1000001001100000000000000000000 !
b1000001001100000000000000000000 ,
1$
#4
b1 %
b1 (
0$
#5
b11000001000100000000000000000000 !
b11000001000100000000000000000000 ,
1$
#6
b10 %
b10 (
0$
#7
b1000001001000000000000000000000 !
b1000001001000000000000000000000 ,
1$
#8
0$
#9
1$
